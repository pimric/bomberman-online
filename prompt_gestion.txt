# Contexte de travail pour un projet web avec système de marqueurs

Bonjour Claude, je travaille sur un projet web pour lequel j'utilise un 
script d'automatisation qui intègre tes propositions de code directement 
dans mon projet. Pour que ce système fonctionne efficacement, j'ai besoin 
que tu respectes certaines conventions lorsque tu me fournis du code.

## Conventions de fichiers

### 1. Fichiers complets
Si je te demande de créer un fichier complet (nouvelle page HTML, script 
JS entier, fichier CSS), fournis simplement le code standard avec 
l'extension appropriée.

Exemple: `contact.html` pour une page de contact complète.

### 2. Snippets (sections spécifiques) - IMPORTANT
Si je te demande de modifier ou créer une section spécifique d'un fichier 
existant, tu dois absolument suivre cette convention:

- **Format du nom de fichier**: 
  - `snippet_IDENTIFIANT_MARQUEUR.extension` (avec underscore)
  - OU `snippet-IDENTIFIANT_MARQUEUR.extension` (avec tiret)
  - Le script accepte les deux formats

- `IDENTIFIANT_MARQUEUR` est un identifiant unique que je te fournirai 
ou que tu pourras choisir logiquement (ex: header, navigation, footer, 
product_card, etc.)

- **Note**: Si le navigateur ajoute des suffixes numériques comme (1), (2) 
au nom du fichier, le script les ignore automatiquement.

- **Exemples de noms valides**:
  - `snippet_header.html` ou `snippet-header.html`
  - `snippet_main_navigation.css` ou `snippet-main_navigation.css`
  - `snippet_login_form.js` ou `snippet-login_form.js`
  - `snippet_cart_functions.js` ou `snippet-cart_functions.js`

- **Contenu du snippet**:
  - Inclus UNIQUEMENT le code qui doit remplacer la section entre les 
marqueurs
  - N'inclus PAS les marqueurs eux-mêmes dans le snippet
  - Pas de commentaires explicatifs dans le snippet (tu peux les mettre 
dans ta réponse textuelle)

## Structure des marqueurs dans mes fichiers

Mes fichiers de projet contiennent déjà des marqueurs qui délimitent les 
sections modifiables. Voici comment ils se présentent:

- **HTML/XML/SVG**:
```html
<!-- SYNC_MARKER: identifiant_marqueur -->
... contenu à remplacer ...
<!-- END_SYNC_MARKER: identifiant_marqueur -->
```

- **CSS/SCSS/Java/C/C++/TypeScript**:
```css
/* SYNC_MARKER: identifiant_marqueur */
... contenu à remplacer ...
/* END_SYNC_MARKER: identifiant_marqueur */
```

- **JavaScript**: (le script accepte les deux formats)
```js
// SYNC_MARKER: identifiant_marqueur
... contenu à remplacer ...
// END_SYNC_MARKER: identifiant_marqueur
```
OU
```js
/* SYNC_MARKER: identifiant_marqueur */
... contenu à remplacer ...
/* END_SYNC_MARKER: identifiant_marqueur */
```

- **Python/Shell/Ruby/YAML/TOML**:
```python
# SYNC_MARKER: identifiant_marqueur
... contenu à remplacer ...
# END_SYNC_MARKER: identifiant_marqueur
```

## Types de fichiers supportés

Le script prend en charge de nombreux types de fichiers, dont :
- .html, .css, .js, .json
- .png, .jpg, .jpeg, .svg, .gif
- .txt, .md, .pdf
- .py, .sh, .rb, .java, .cs, .go, .ts, .c, .cpp
- .scss, .xml, .yaml, .yml, .toml
- .zip, .rar, .7z, .gz, .tar

## Fonctionnement du script d'automatisation

1. Le script surveille automatiquement mon dossier "Téléchargements"
2. Quand un nouveau fichier y apparaît, il l'analyse selon ces règles :
   - Si le nom commence par `snippet_` ou `snippet-`, il est traité comme 
un snippet
   - Le script extrait l'identifiant du marqueur et cherche les marqueurs 
correspondants dans tous les fichiers du projet
   - Il remplace le contenu entre les marqueurs par le contenu du snippet
   - Il préserve l'indentation du code original
   - Si le remplacement réussit, le fichier snippet est automatiquement 
supprimé

3. Pour les fichiers non-snippet:
   - Le script tente de trouver un fichier existant de même nom dans le 
projet
   - Pour les fichiers textuels, il vérifie aussi la similarité de contenu
   - Si une correspondance est trouvée, il remplace le fichier existant
   - Sinon, il déplace le fichier dans un sous-dossier approprié selon son 
extension

## Encodage

Le script gère automatiquement plusieurs encodages (utf-8, cp1252, 
latin-1) 
lors de la lecture des fichiers, tu n'as donc pas à te préoccuper de 
l'encodage.

## Exemple de workflow

Si je te demande: "Modifie la navigation principale de mon site pour 
ajouter un lien 'Produits' et mets la section 'À propos' en avant. 
L'identifiant du marqueur est 'main_nav'."

Ta réponse devrait inclure:

1. Une explication de tes changements
2. Un fichier nommé exactement `snippet_main_nav.html` ou 
`snippet_main_nav.css` (selon le type de fichier concerné)
3. Dans ce fichier, uniquement le code HTML ou CSS qui doit remplacer la 
section entre les marqueurs

## Important

- Dans tes réponses, crée toujours un artefact pour chaque snippet demandé
- Ne mets pas les marqueurs SYNC_MARKER dans le snippet, ils sont déjà 
dans mes fichiers
- Assure-toi que le nom du fichier commence bien par `snippet_` suivi de 
l'identifiant exact
- Si je ne te fournis pas explicitement un identifiant de marqueur, 
choisis-en un logique et explicite
- Le script préserve l'indentation du code original, donc ne t'inquiète 
pas pour cela
- Il n'est pas nécessaire de vérifier la présence de "SYNC_MARKER" dans 
ton snippet

Merci de suivre ces conventions pour notre collaboration efficace sur ce 
projet.
